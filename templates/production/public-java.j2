@Library('shared-lib') _

pipeline {
    agent none
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '14', daysToKeepStr: '14'))
    }


  parameters {
    choice(name: 'RE_BUILD', choices: ['False', 'True'], description: '是否重新编译后发布')
    gitParameter branchFilter: 'origin/(.*)', quickFilterEnabled:true,defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH',useRepository: '{{gitAddr}}',description: "如果重新编译,请选择编译分支"
    string(name: 'IMAGE_URL', defaultValue: '', description: '如果直接发布，请输入镜像地址(注意！！！ 不要有空格，否则检测失败)')
    booleanParam(name: 'CLEAR_CACHE', defaultValue: false, description: '如果重新编译，是否清理缓存 ')

  }
    stages{

     stage("代码检出"){
            agent {
                node{
                    label '{{checkoutLabel}}'
                }
            }
            steps {
                script {
                       cleanWs()
                       buildUser  = getTriggerUser()
                       currentBuild.displayName = "#${env.BUILD_NUMBER} - ${buildUser}"
                       gitCheckout(BRANCH: params.BRANCH, gitAddr: "{{gitAddr}}",authId: "{{authId}}" )
                       stash name: 'source-code', includes: '**'
                }
            }
     }





     stage('初始化') {

            agent {
                node{
                    label '{{checkoutLabel}}'
                }
            }

       steps {
             script {
                   nameSpace = "{{namespace}}"
                   serviceName = "{{service}}"
                   authId = "{{ authId }}"
                   gitAddr = '{{ gitAddr }}'
                   beforeDeployCheck.deployInterrupt(1)
                   if(params.RE_BUILD == "False"){
                         stagesToExecute = ["Audit", "imageUpdate","healthCheck","imageRename"]
                         echoColor(" Stages to execute: ${stagesToExecute.join(', ')} ")
                         beforeDeployCheck.checkImageUrl(env.IMAGE_URL,false)
                   }else{
                         stagesToExecute = ["Audit", "imageUpdate", "Checkout","Compile","imageBuild","healthCheck"]
                         echoColor(" Stages to execute: ${stagesToExecute.join(', ')} ")
                   }

                   auditInfo = beforeDeployCheck.getAuditPerson(nameSpace)

            }
         }
     }


     stage("代码编译"){
            agent {
                node{
                    label '{{compileLabel}}'
                }
            }
            when{
              expression  { 'Compile' in stagesToExecute}
            }
            steps {

              script{
                    javaCompile(mvnVersion: "{{mvnVersion}}", clearCache: params.CLEAR_CACHE, subPath: '{{subPath}}', inBuild: {{inBuild}})
                }
             }

          }


     stage("镜像构建"){
            agent {
                node{
                    label '{{ buildLabel }}'
                }
            }
            when{
              expression  { 'imageBuild' in stagesToExecute}
            }
            steps {
                script {
                   cleanWs()
                      unstash 'jarBar'
                      currentImageUrl = javaImageBuild(PROJECT: "{{namespace}}", ENV_TYPE: "{{envType}}", IMG_BASE: '{{dockerFrom}}',PORT: {{port}}, DOCKERFILE: {{dockerFile}})
                }
            }
     }


     stage("镜像重命名"){
            agent {
                node{
                    label '{{ buildLabel }}'
                }
            }
            when{
              expression  { 'imageRename' in stagesToExecute}
            }
            steps {
                script {
                      cleanWs()
                      currentImageUrl = imageRename("{{namespace}}", "{{service}}",params.IMAGE_URL)
                      echo "重命名后的镜像: $currentImageUrl"
                }
            }
     }



     stage("等待审批"){
            agent {
                node{
                    label 'master'
                }
            }
            when{
              expression  { 'Audit' in stagesToExecute}
            }
            steps {
              script {
                webhook = auditInfo[1]
                def users = auditInfo[0]
                def userStr = users.join(',')
                def title = '# **生产服务上线审批通知 ** \n '
                content = '>命名空间：<font color=\"info\">'+nameSpace+'</font>\n > 服务名: <font color=\"info\">'
                content = content + serviceName + '</font>\n' + '>请点击此处: [跳转jenkins审批](' + env.JOB_URL + ') \n >'
                if(params.RE_BUILD == "False"){
                  content = content + '构建类型: 直接镜像发布\n >镜像地址: ' + params.IMAGE_URL
                }else{
                  content = content + '构建类型: 重新编译发布\n >发布分支: ' + params.BRANCH
                }
                def send_content = title + content + '\n>审批用户: ' + userStr
                if(webhook.length()>10){
                   sendMessage(webhook,send_content)
                }
                timeout(time: 24, unit: 'HOURS') {
                  echoColor(" 审批用户: $userStr")
                  auditInput(userStr)
                }
              }
            }
       }

      stage("应用更新"){
            agent {
                node{
                    label '{{updateLabel}}'
                }
            }
            when{
              expression  { 'imageUpdate' in stagesToExecute}
            }
            steps {
                script {
                      cleanWs()
                      echo "应用开始更新"
                      if(params.RE_BUILD == 'False'){
                         imageUpdate(SERVICE_NAME: "{{service}}", NAMESPACE: "{{namespace}}", CLUSTER: "{{k8sConf}}", UPDATE_IMAGE: currentImageUrl)
                      }else{
                         imageUpdate(SERVICE_NAME: "{{service}}", NAMESPACE: "{{namespace}}", CLUSTER: "{{k8sConf}}")
                     }
                }
            }
       }

      stage("健康检查"){
            agent {
                node{
                    label '{{healCheckLabel}}'
                }
            }
            when{
              expression  { 'healthCheck' in stagesToExecute}
            }
            steps {


                 script {
                      cleanWs()

                      //加了镜像重命名后可以取消判断
                      //if(params.RE_BUILD == "False"){
                      //  currentImageUrl = params.IMAGE_URL
                     // }

                      echo "更新的镜像地址: $currentImageUrl"
                      if(currentImageUrl){
                          healthCheck('{{namespace}}','{{service}}',"300","{{k8sConf}}",currentImageUrl)
                          echo "检测完毕,应用已启动"
                            
                       }else{
                           echoColor('镜像地址为空, 请检查应用是否则正确更新')
                           error "终止发布"
                         }
                }


            }
       }

    }


}
















